// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OOP.EF.Core.ConsoleApp.DAL.Abstract;

namespace OOP.EF.Core.ConsoleApp.Migrations
{
    [DbContext(typeof(BookAppDbContext))]
    [Migration("20211216221703_BookAuthorsManyToManyRelation")]
    partial class BookAuthorsManyToManyRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            FirstName = "ahmed",
                            LastName = "ali"
                        });
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CategoryId = 3,
                            Price = 25m,
                            Title = "marriage"
                        },
                        new
                        {
                            BookId = 2,
                            CategoryId = 3,
                            Price = 100m,
                            Title = "History Of Islam"
                        },
                        new
                        {
                            BookId = 3,
                            CategoryId = 3,
                            Price = 35m,
                            Title = "Goal"
                        });
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.BookAuthor", b =>
                {
                    b.Property<int>("BookauthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("BookauthorId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.BookDetail", b =>
                {
                    b.Property<int>("BookDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISSN")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("0000-0000-0000");

                    b.Property<int>("Year")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2021);

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookDetailId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("categoryName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            categoryName = "lenovo",
                            description = "laptop"
                        },
                        new
                        {
                            CategoryId = 2,
                            categoryName = "HP",
                            description = "Monitor"
                        },
                        new
                        {
                            CategoryId = 3,
                            categoryName = "Dell",
                            description = "desktop"
                        });
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.Book", b =>
                {
                    b.HasOne("OOP.EF.Core.ConsoleApp.Entity.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.BookAuthor", b =>
                {
                    b.HasOne("OOP.EF.Core.ConsoleApp.Entity.Author", "Author")
                        .WithMany("bookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OOP.EF.Core.ConsoleApp.Entity.Book", "Book")
                        .WithMany("bookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.BookDetail", b =>
                {
                    b.HasOne("OOP.EF.Core.ConsoleApp.Entity.Book", "Book")
                        .WithOne("BookDetail")
                        .HasForeignKey("OOP.EF.Core.ConsoleApp.Entity.BookDetail", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.Author", b =>
                {
                    b.Navigation("bookAuthors");
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.Book", b =>
                {
                    b.Navigation("bookAuthors");

                    b.Navigation("BookDetail");
                });

            modelBuilder.Entity("OOP.EF.Core.ConsoleApp.Entity.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
